@page "/Cliente"
@page "/Cliente/{Id:int}"

@inject ClientServices clientServices
@inject IToastService toast

<EditForm Model="client" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div class="card">
        @*Header*@
        <div class="card-header">
            <div class="form-group">
                <h5>Clientes</h5>
            </div>
        </div>

        @*Body*@
        <div class="card-body">
            <form>
                <div class="form-row align-items-md-center align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label for="buscar">Buscar</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="client.Id" class="form-control col-4" />
                                <div class="form-group-append">
                                    <button class="btn btn-primary input-group-text" type="button" @onclick="Search">
                                        <span class="oi oi-eye"></span> Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Name*@
                <div class="form-group">
                    <label>Nombres</label>
                    <InputText @bind-Value="client.Name" class="form-control" />
                    <ValidationMessage For="@(() => client.Name)" />
                    <small>
                        Ingresar el(os) nombres del cliente
                    </small>
                </div>

                @*LastName*@
                <div class="form-group">
                    <label>Apellidos</label>
                    <InputText @bind-Value="client.LastName" class="form-control" />
                    <ValidationMessage For="@(() => client.LastName)" />
                    <small>
                        Ingresar el apellido del cliente
                    </small>
                </div>
            </form>

        </div>

        @*Fotter*@
        <div class="card-footer">
            <div class="form-group text-center">
                <button type="button" class="btn btn-primary" @onclick="New">
                    <span class="oi oi-plus"></span> Nuevo
                </button>
                <button type="submit" class="btn btn-success">
                    <span class="oi oi-document">Guardar</span>
                </button>
                <button type="button" class="btn btn-danger" @onclick="Delete">
                    <span class="oi oi-delete">Eliminar</span>
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    Client client = new Client();
    [Parameter] public int Id { get; set; }

    protected override void OnInitialized()
    {
        if (Id > 0) Search();

        New();
    }

    protected void New()
    {
        client = new Client();
    }

    protected void Save()
    {

        try
        {
            if (clientServices.Save(client).IsCompleted)
            {
                New();
                toast.ShowSuccess("Se guardo el cliente! 😄");
            }
            else
            {
                toast.ShowWarning("No se pudo guardar el cliente! 😣");

            }
        }
        catch (Exception e)
        {

            toast.ShowError($"{e.Message}");
        }
    }

    protected async void Delete()
    {
        try
        {
            await clientServices.Delete(client.Id);
            toast.ShowSuccess("Se elimino el cliente! 😄");
            New();
        }
        catch (Exception e)
        {

            toast.ShowError($"{e.Message}");
        }
    }

    protected async void Search()
    {

        try
        {
            if (client.Id > 0)
            {
                var isFound = await clientServices.GetOne(client.Id);

                if (isFound != null)
                {
                    this.client = isFound;
                    Id = this.client.Id;
                    toast.ShowSuccess("Cliente encontrado! 😄");
                }
                else
                {
                    toast.ShowWarning("No existe un cliente con ese id 🙄");
                }
            }
        }
        catch (Exception e)
        {

            toast.ShowError($"{e.Message}");
        }
    }
}
