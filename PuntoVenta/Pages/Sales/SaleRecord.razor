@page "/Venta"
@page "/Venta/{Id:int}"

@inject SaleServices saleServices
@inject ClientServices clientServices
@inject ProductServices productServices  
@inject IToastService toast

<EditForm Model="sale" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div id="MainContainer" class="card">
        <div class="card-header">
            <div class="form-group">
                <h5 id="Titulo">Registró Ventas</h5>
            </div>
        </div>

        <div class="card-body">
            <form>
                @*Sale*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label for="VentaIdPicker">No. Factura</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="sale.Id" id="VentaIdPicker" min="0" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button class="btn btn-primary" type="button" @onclick="Search">
                                        <span class="oi oi-magnifying-glass"></span> Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Client*@
                <div class="form-group">
                    <label>Cliente</label>
                    <InputSelect @bind-Value="clientId" class="form-control">
                        <option value="0">Seleccione un cliente</option>
                        @foreach (var client in clients)
                        {
                            <option value="@client.Id">@client.Name @client.LastName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="(() => sale.ClientId)" />
                    <small id="ProductsIdLineHelper">
                        Seleccione un cliente
                    </small>
                </div>

                @*Date*@
                <div class="form-group">
                    <label for="DatePicker">Fecha emision</label>
                    <InputDate @bind-Value="sale.Date" id="DatePicker" class="form-control"/>
                    <ValidationMessage For="(() => sale.Date)" />
                    <small id="EntryDateInlineHelper">
                        Fecha de emision de la factura
                    </small>
                </div>

                @*Sale Detail*@
                <div class="row">
                    <div class="form-group col">
                        <label>Codigo</label>
                        <InputText @bind-Value="saleDetailId" class="form-control" readOnly="true" />
                    </div>

                    @*Product*@
                    <div class="form-group col">
                        <label>Producto</label>
                        <InputSelect @bind-Value="productId" class="form-control">
                            <option value="0">Seleccione un producto</option>
                            @foreach (var product in products)
                            {
                                <option value="@product.Id">@product.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => saleDetail.ProductId)" />
                        <small id="ProductsIdLineHelper">
                            Seleccione el producto
                        </small>
                    </div>

                    @*Price*@
                    <div class="form-group col">
                        <label>Precio</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="price" class="form-control"/>
                            <ValidationMessage For="(() => saleDetail.Price)" />
                        </div>
                        <small id="PriceIdInLineHelper">
                            Precio del producto
                        </small>
                    </div>

                    @*Quantity*@
                    <div class="form-group col">
                        <label>Cantidad</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="quantity" class="form-control" />
                            <ValidationMessage For="(() => saleDetail.Quantity)" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary" @onclick="AddSaleDetail">
                                    <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                </button>
                            </div>
                        </div>
                        <small id="QuantityIdInLineHelper"> Cantidad del producto </small>
                    </div>
                </div>

                @*Detail*@
                <table class="table" style="border-bottom: 1px groove;">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Producto</th>
                            <th scope="col">Cantidad</th>
                            <th scope="col">Precio</th>
                            <th scope="col">Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in sale.SaleDetails)
                        {
                            <tr>
                                <td>@item.Product.Name</td>
                                <td>@item.Quantity</td>
                                <td>@item.Price.ToString("N2")</td>
                                <td>@item.Total.ToString("N2")</td>
                                <td><button type="button" class="btn btn-danger" @onclick="(() => RemoveSaleDetail(item))">Remover</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </form>
        </div>

        @*Buttons*@
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="New">
                    <span class="oi oi-plus"></span> Nuevo
                </button>

                <button type="submit" class="btn btn-lg btn-success">
                    <span class="oi oi-clipboard" aria-hidden="true"></span> Guardar
                </button>

                <button type="button" class="btn btn-lg btn-danger" @onclick="Delete">
                    <span class="oi oi-trash"></span> Eliminar
                </button>
            </div>
        </div>

    </div>
</EditForm>

@code {

    Sale sale = new Sale();
    SaleDetail saleDetail = new SaleDetail();
    Product product = new Product();

    [Parameter]
    public int Id { get; set; }

    private string clientId = "0";

    string saleDetailId = "0";
    string productId = "0";
    int quantity = 0;
    double price = 0;

    private List<Client> clients = new List<Client>();
    private List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        if (Id > 0) await Search();

        New();

        clients = await clientServices.GetAll();
        products = await productServices.GetAll();
    }

    protected async Task Search()
    {
        try
        {
            if(sale.Id > 0)
            {
                var isFoundSale = await saleServices.GetOne(sale.Id);

                if(isFoundSale != null)
                {
                    this.sale = isFoundSale;
                    Id = this.sale.Id;
                    this.clientId = sale.Client.Id.ToString();

                    toast.ShowSuccess("Venta encontrada! 😄");
                }
                else
                {
                    toast.ShowWarning("No se encontro esa venta! 🙄");
                }
            }
        }
        catch (Exception e)
        {

            toast.ShowError($"{e.Message}");
        }
    }

    protected void Save()
    {
        try
        {
            sale.ClientId = Convert.ToInt32(this.clientId);

            if (saleServices.Save(sale).IsCompleted)
            {
                toast.ShowSuccess("Se guardo correctamente 😄");
                New();
            }
            else
            {
                toast.ShowWarning("Verifique los campos 🙄");
            }
        }
        catch (Exception e)
        {
            toast.ShowError($"{e.Message}");
        }
    }

    protected async Task Delete()
    {
        try
        {
            await saleServices.Delete(sale.Id);
            toast.ShowSuccess("Se elimino la venta! 😄");
            New();
        }
        catch (Exception e)
        {

            toast.ShowError($"{e.Message}");
        }
    }

    protected void New()
    {
        sale = new Sale();
        sale.Date = DateTime.Now;
        clientId = "0";
        saleDetailId = "0";
        productId = "0";
        quantity = 0;
        price = 0;
    }

    protected async void AddSaleDetail() {

        var isProductFound = await productServices.GetOne(Convert.ToInt32(this.productId));

        sale.SaleDetails.Add(new SaleDetail()
        {
            Price = price,
            ProductId = isProductFound.Id,
            Product = isProductFound,
            Quantity = quantity,
            Total = quantity * price
        });
    }

    protected void RemoveSaleDetail(SaleDetail saleDetail)
    {
        try
        {
            sale.SaleDetails.Remove(saleDetail);
        }
        catch (Exception e)
        {
            toast.ShowError($"{e.Message}");
        }
    }
}
